import tntdebug

from puzzle import ThreeByThreeCubeFewestMovesPuzzle
from net.gnehzr.tnoodle.scrambles import AlgorithmBuilder
from net.gnehzr.tnoodle.scrambles.AlgorithmBuilder import MergingMode

from net.gnehzr.tnoodle.utils import Utils
r = Utils.getSeededRandom()

def main():
    threeFm = ThreeByThreeCubeFewestMovesPuzzle()
    canonicalMoves = threeFm.getSolvedState().getCanonicalMovesByState().values()
    desiredCanonicalMoves = []
    for face in "RUFLDB":
        for d in [ "", "'", "2" ]:
            desiredCanonicalMoves.append(face + d)
    assert set(canonicalMoves) == set(desiredCanonicalMoves)

    solved = threeFm.getSolvedState()

    faces =    "URFDLB"
    oppFaces = "DLBURF"
    faceToOppFace = dict(zip(faces, oppFaces))

    def testSolveIn(scramble, firstAxisRestriction, lastAxisRestriction):
        # Search for a solution to a cube scrambled with scramble,
        # but require that that solution not start or end with restriction.
        u = solved.apply(scramble)
        solution = threeFm.solveIn(u, 20, firstAxisRestriction, lastAxisRestriction)
        print "Solution to %s (solution may not start with %s axis and may not end with %s axis): %s" % (scramble, firstAxisRestriction, lastAxisRestriction, solution)
        shouldBeSolved = u.applyAlgorithm(solution)
        assert shouldBeSolved.isSolved()

        moves = solution.split()
        firstMove = moves[0]
        lastMove = moves[-1]

        # firstAxisRestriction defines an axis of turns that may not start a solution,
        # so we assert the solution's first move starts with neither
        # firstAxisRestriction, nor the face opposite firstAxisRestriction.
        assert not firstMove.startswith(firstAxisRestriction)
        assert not firstMove.startswith(faceToOppFace[firstAxisRestriction])

        # Same for the last move.
        assert not lastMove.startswith(lastAxisRestriction)
        assert not lastMove.startswith(faceToOppFace[lastAxisRestriction])

    for p in [ "", "2", "'" ]:
        for firstAxisRestriction in faces:
            for lastAxisRestriction in faces:
                    scramble = firstAxisRestriction + p
                    testSolveIn(scramble, firstAxisRestriction, lastAxisRestriction)

    scrambled = solved.applyAlgorithm("L' R2 U D2 L2")
    solution = threeFm.solveIn(scrambled, 20, "L", "L")
    assert scrambled.applyAlgorithm(solution).isSolved()

    moves = solution.split()
    firstMove = moves[0]
    lastMove = moves[-1]
    assert not firstMove.startswith("L")
    assert not lastMove.startswith("L")

    for i in range(10):
        uncancelledScramble = threeFm.generateWcaScramble(r)
        ab = AlgorithmBuilder(threeFm, MergingMode.CANONICALIZE_MOVES)
        ab.appendAlgorithm(uncancelledScramble)
        scramble = ab.getStateAndGenerator().generator
        assert len(scramble) == len(uncancelledScramble)
        print "%s move 333fm scramble: %s" % (len(scramble.split()), scramble)
        assert scramble.startswith("R' U' F")
        assert scramble.endswith("R' U' F")

if __name__ == "__main__":
    main()
