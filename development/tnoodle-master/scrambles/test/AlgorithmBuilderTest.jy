import tntdebug

from puzzle import CubePuzzle

from net.gnehzr.tnoodle.scrambles import PuzzlePlugins
from net.gnehzr.tnoodle.scrambles import AlgorithmBuilder
from net.gnehzr.tnoodle.scrambles.AlgorithmBuilder import MergingMode

def main():
    # This test doesn't really belong here, but I don't have a better
    # place for it right now.
    sixes = CubePuzzle(6)
    scrambleSuccessors = dict(sixes.getSolvedState().getScrambleSuccessors())
    moves = scrambleSuccessors.keys()
    assert "3Bw" not in moves
    assert "3Lw" not in moves
    assert "3Dw" not in moves

    lazyScramblers = dict(PuzzlePlugins.getScramblers())
    for puzzle, lazyScrambler in lazyScramblers.iteritems():
        print "Testing redundant moves on " + puzzle
        scrambler = lazyScrambler.cachedInstance()

        for move in scrambler.getSolvedState().getSuccessorsByName():
            ab = AlgorithmBuilder(scrambler, MergingMode.NO_MERGING)
            ab.appendAlgorithm(move)
            # Right now, it is true to say that for every single WCA puzzle,
            # applying the same move twice is redundant.
            assert ab.isRedundant(move)

if __name__ == "__main__":
    main()
