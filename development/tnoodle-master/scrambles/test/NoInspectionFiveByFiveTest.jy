from puzzle.CubePuzzle import Face
from puzzle.CubePuzzle import CubeMove
from puzzle import NoInspectionFiveByFiveCubePuzzle
from net.gnehzr.tnoodle.scrambles import PuzzleStateAndGenerator
from net.gnehzr.tnoodle.scrambles.AlgorithmBuilder import MergingMode
from net.gnehzr.tnoodle.scrambles import AlgorithmBuilder as AlgorithmBuilder

import tntdebug

def main():
    fives = NoInspectionFiveByFiveCubePuzzle()

    reorient = [ CubeMove(fives, Face.U, 1, 3) ]
    assert reorient[0].toString() == "4Uw"

    ab = AlgorithmBuilder(fives, MergingMode.NO_MERGING)
    ab.appendAlgorithm("F R")
    psag1 = ab.getStateAndGenerator()
    psag2 = NoInspectionFiveByFiveCubePuzzle.applyOrientation(fives, reorient, psag1, True)
    # The scramble (F R) and the reorient (4Uw) don't conflict,
    # so the resulting scramble should be "F R 4Uw"
    assert psag2.generator == "F R 4Uw"
    
    ab = AlgorithmBuilder(fives, MergingMode.NO_MERGING)
    ab.appendAlgorithm("F D")
    psag1 = ab.getStateAndGenerator()
    psag2 = NoInspectionFiveByFiveCubePuzzle.applyOrientation(fives, reorient, psag1, True)
    # The scramble (F D) and the reorient (4Uw) are redundant.
    # The problematic D turn should be removed, and the resulting
    # scramble should be "F 4Uw"
    assert psag2.generator == "F 4Uw"

    ab = AlgorithmBuilder(fives, MergingMode.NO_MERGING)
    ab.appendAlgorithm("D U D U")
    psag1 = ab.getStateAndGenerator()
    psag2 = NoInspectionFiveByFiveCubePuzzle.applyOrientation(fives, reorient, psag1, True)
    # The scramble (D U D U) and the reorient (4Uw) are redundant.
    # The problematic D turns should be removed, and the resulting
    # scramble should be "U U 4Uw"
    assert psag2.generator == "U U 4Uw"

if __name__ == "__main__":
    main()
